generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Submission {
  id                        String    @id(map: "SubmissionNew_pkey") @default(uuid()) @db.Uuid
  recordNumber              Int       @default(autoincrement())
  submissionCode            String    @unique(map: "SubmissionNew_submissionCode_key")
  fullName                  String    @db.VarChar(60)
  emailAddress              String    @db.VarChar(80)
  submissionSource          String
  organisation              String?
  briefDescription          String    @db.VarChar(500)
  justification             String
  urgencyLevel              String
  impactAreas               String[]
  affectedReferenceDataArea String?
  technicalDependencies     String?
  relatedDocuments          String?
  attachments               String
  additionalNotes           String?
  declaration               Boolean
  reviewOutcome             String?
  reviewComments            String?
  reviewedAt                DateTime? @db.Timestamptz(6)
  deletedAt                 DateTime? @db.Timestamptz(6)
  createdAt                 DateTime  @db.Timestamptz(6)
  updatedAt                 DateTime  @db.Timestamptz(6)
  submittedById             String    @db.Uuid
  bcrId                     String?   @db.Uuid
  bcrsWithSubmission        Bcr[]     @relation("BcrSubmission")
  bcr                       Bcr?      @relation("BcrToSubmission", fields: [bcrId], references: [id])
  submittedBy               Users     @relation("UserToSubmission", fields: [submittedById], references: [id])

  @@index([submittedById])
  @@index([recordNumber])
}

model BcrWorkflowActivity {
  id            String   @id @default(uuid()) @db.Uuid
  bcrId         String   @db.Uuid
  phase         String
  status        String
  action        String
  performedById String   @db.Uuid
  performedAt   DateTime @db.Timestamptz(6)
  notes         String?
  bcr           Bcr      @relation("BcrToWorkflowActivity", fields: [bcrId], references: [id])
  performedBy   Users    @relation("UserToWorkflowActivity", fields: [performedById], references: [id])

  @@index([bcrId])
  @@index([performedById])
}

model Bcrs {
  id                            String    @id(map: "Bcrs_new_pkey") @db.Uuid
  description                   String
  status                        String    @default("new_submission")
  priority                      String    @default("medium")
  impact                        String?
  requestedBy                   String    @db.Uuid
  assignedTo                    String?   @db.Uuid
  targetDate                    DateTime? @db.Timestamptz(6)
  implementationDate            DateTime? @db.Timestamptz(6)
  notes                         String?
  createdAt                     DateTime  @db.Timestamptz(6)
  updatedAt                     DateTime  @db.Timestamptz(6)
  bcrNumber                     String?   @unique(map: "Bcrs_new_bcrNumber_key")
  Users_Bcrs_assignedToToUsers  Users?    @relation("Bcrs_assignedToToUsers", fields: [assignedTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Bcrs_new_assignedTo_fkey")
  Users_Bcrs_requestedByToUsers Users     @relation("Bcrs_requestedByToUsers", fields: [requestedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Bcrs_new_requestedBy_fkey")

  @@index([assignedTo], map: "bcrs_new_assigned_to")
  @@index([requestedBy], map: "bcrs_new_requested_by")
  @@index([status], map: "bcrs_new_status")
}

model Bcr {
  id                 String                @id(map: "BcrsNew_pkey") @default(uuid()) @db.Uuid
  recordNumber       Int                   @default(autoincrement())
  bcrCode            String                @unique(map: "BcrsNew_bcrCode_key")
  submissionId       String                @db.Uuid
  currentPhase       String
  status             String
  urgencyLevel       String
  impactedAreas      String[]
  workflowHistory    Json                  @default("[]")
  createdAt          DateTime              @db.Timestamptz(6)
  updatedAt          DateTime              @db.Timestamptz(6)
  submission         Submission            @relation("BcrSubmission", fields: [submissionId], references: [id], map: "BcrsNew_submissionId_fkey")
  workflowActivities BcrWorkflowActivity[] @relation("BcrToWorkflowActivity")
  submissions        Submission[]          @relation("BcrToSubmission")

  @@index([recordNumber], map: "BcrsNew_recordNumber_idx")
  @@index([status], map: "BcrsNew_status_idx")
  @@index([submissionId], map: "BcrsNew_submissionId_idx")
}

model ImpactedArea {
  id           String   @id @default(uuid()) @db.Uuid
  recordNumber Int      @default(autoincrement())
  name         String   @unique
  description  String?
  order        Int
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)
}

model Fundings {
  id                                  String    @id @db.Uuid
  trainingRoute                       String    @db.VarChar(255)
  academicYear                        String    @db.VarChar(255)
  fundingAmount                       Decimal   @db.Decimal(10, 2)
  fundingType                         String    @db.VarChar(255)
  description                         String?
  isActive                            Boolean   @default(true)
  effectiveDate                       DateTime  @db.Timestamptz(6)
  expiryDate                          DateTime? @db.Timestamptz(6)
  createdBy                           String    @db.Uuid
  lastUpdatedBy                       String?   @db.Uuid
  notes                               String?
  metadata                            Json?
  createdAt                           DateTime  @db.Timestamptz(6)
  updatedAt                           DateTime  @db.Timestamptz(6)
  Users_Fundings_createdByToUsers     Users     @relation("Fundings_createdByToUsers", fields: [createdBy], references: [id])
  Users_Fundings_lastUpdatedByToUsers Users?    @relation("Fundings_lastUpdatedByToUsers", fields: [lastUpdatedBy], references: [id])

  @@index([trainingRoute, academicYear], map: "fundings_training_route_academic_year")
}

model WorkflowPhase {
  id              String @id @default(uuid())
  order           Int
  name            String @unique
  currentStatus   String
  completedStatus String
}

model ReferenceData {
  id                                       String    @id @db.Uuid
  name                                     String    @db.VarChar(255)
  code                                     String    @unique @db.VarChar(255)
  category                                 String    @db.VarChar(255)
  description                              String?
  isActive                                 Boolean   @default(true)
  validFrom                                DateTime? @db.Timestamptz(6)
  validTo                                  DateTime? @db.Timestamptz(6)
  createdBy                                String    @db.Uuid
  lastUpdatedBy                            String?   @db.Uuid
  version                                  Int       @default(1)
  metadata                                 Json?
  createdAt                                DateTime  @db.Timestamptz(6)
  updatedAt                                DateTime  @db.Timestamptz(6)
  Users_ReferenceData_createdByToUsers     Users     @relation("ReferenceData_createdByToUsers", fields: [createdBy], references: [id])
  Users_ReferenceData_lastUpdatedByToUsers Users?    @relation("ReferenceData_lastUpdatedByToUsers", fields: [lastUpdatedBy], references: [id])

  @@index([category], map: "reference_data_category")
  @@index([code], map: "reference_data_code")
}

model ReleaseNotes {
  id                                   String                        @id @db.Uuid
  version                              String                        @db.VarChar(255)
  title                                String                        @db.VarChar(255)
  description                          String
  environment                          enum_ReleaseNotes_environment
  status                               enum_ReleaseNotes_status      @default(planned)
  releaseDate                          DateTime                      @db.Timestamptz(6)
  completedDate                        DateTime?                     @db.Timestamptz(6)
  createdBy                            String                        @db.Uuid
  approvedBy                           String?                       @db.Uuid
  changeLog                            String?
  impactedSystems                      String[]                      @db.VarChar(255)
  notes                                String?
  createdAt                            DateTime                      @db.Timestamptz(6)
  updatedAt                            DateTime                      @db.Timestamptz(6)
  Users_ReleaseNotes_approvedByToUsers Users?                        @relation("ReleaseNotes_approvedByToUsers", fields: [approvedBy], references: [id])
  Users_ReleaseNotes_createdByToUsers  Users                         @relation("ReleaseNotes_createdByToUsers", fields: [createdBy], references: [id])

  @@index([environment, status], map: "release_notes_environment_status")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model BcrConfigs {
  id           String   @id @db.Uuid
  type         String   @db.VarChar(255)
  name         String   @db.VarChar(255)
  value        String?
  displayOrder Int      @default(0)
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)

  @@index([type], map: "bcr_configs_type")
}

model Users {
  id                                               String                @id @db.Uuid
  email                                            String                @unique @db.VarChar(255)
  password                                         String                @db.VarChar(255)
  name                                             String                @db.VarChar(255)
  role                                             enum_Users_role       @default(business)
  active                                           Boolean               @default(true)
  lastLogin                                        DateTime?             @db.Timestamptz(6)
  createdAt                                        DateTime              @db.Timestamptz(6)
  updatedAt                                        DateTime              @db.Timestamptz(6)
  workflowActivities                               BcrWorkflowActivity[] @relation("UserToWorkflowActivity")
  Bcrs_Bcrs_assignedToToUsers                      Bcrs[]                @relation("Bcrs_assignedToToUsers")
  Bcrs_Bcrs_requestedByToUsers                     Bcrs[]                @relation("Bcrs_requestedByToUsers")
  Fundings_Fundings_createdByToUsers               Fundings[]            @relation("Fundings_createdByToUsers")
  Fundings_Fundings_lastUpdatedByToUsers           Fundings[]            @relation("Fundings_lastUpdatedByToUsers")
  ReferenceData_ReferenceData_createdByToUsers     ReferenceData[]       @relation("ReferenceData_createdByToUsers")
  ReferenceData_ReferenceData_lastUpdatedByToUsers ReferenceData[]       @relation("ReferenceData_lastUpdatedByToUsers")
  ReleaseNotes_ReleaseNotes_approvedByToUsers      ReleaseNotes[]        @relation("ReleaseNotes_approvedByToUsers")
  ReleaseNotes_ReleaseNotes_createdByToUsers       ReleaseNotes[]        @relation("ReleaseNotes_createdByToUsers")
  submissions                                      Submission[]          @relation("UserToSubmission")
  AuditLog                                         AuditLog[]            @relation("AuditLog_userToUsers")

  @@index([email], map: "users_email")
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String
  expiresAt DateTime @db.Timestamptz(3)
}

model AuditLog {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  action       String
  userId       String   @db.Uuid
  resourceType String
  resourceId   String
  details      Json?
  ipAddress    String?
  user         Users    @relation("AuditLog_userToUsers", fields: [userId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@map("audit_logs")
}

enum enum_Bcrs_priority {
  low
  medium
  high
  critical
}

enum enum_Bcrs_status {
  new
  new_submission
  being_prioritised
  under_technical_review
  in_governance_review
  consulting_stakeholders
  drafting_in_progress
  awaiting_final_approval
  being_implemented
  testing_in_progress
  preparing_for_go_live
  under_post_implementation_review
  closing
  draft
  submitted
  under_review
  approved
  rejected
  implemented
}

enum enum_ReleaseNotes_environment {
  development
  test
  staging
  production
}

enum enum_ReleaseNotes_status {
  planned
  in_progress
  completed
  failed
  cancelled
}

enum enum_Users_role {
  admin
  business
}
