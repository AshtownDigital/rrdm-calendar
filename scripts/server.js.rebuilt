/**
 * Minimal server.js for RRDM application
 * This includes just the essential components to get the BCR submissions page working
 */
const express = require('express');
const session = require('express-session');
const path = require('path');
const nunjucks = require('nunjucks');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Create Express app
const app = express();
const port = process.env.PORT || 3000;

// Configure Nunjucks
const env = nunjucks.configure(path.join(__dirname, '..', 'views'), {
  autoescape: true,
  express: app
});

// Set up view engine
app.set('view engine', 'njk');
app.set('views', path.join(__dirname, '..', 'views'));

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '..', 'public')));

// Session middleware
app.use(session({
  secret: 'rrdm-secret-key',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// Mock authentication middleware for testing
app.use((req, res, next) => {
  if (!req.user) {
    req.user = {
      id: '00000000-0000-0000-0000-000000000000',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin'
    };
  }
  next();
});


app.use('/_vercel/health', vercelHealthRoute);
app.use((req, res, next) => {
      logger.info(`[${req.method}] ${req.path}`);
app.use(serverlessFallbackLimiter);
app.use(securityHeaders());
app.use((req, res, next) => {
      res.setHeader('X-Content-Type-Options', 'nosniff');
app.use('/api', apiLimiter);
app.use('/auth', authLimiter);
app.use(generalLimiter);
app.use(createLoggingMiddleware('combined'));
app.use((req, res, next) => {
      const start = Date.now();
app.use(performanceMiddleware());
app.use(cookieParser());
app.use(passport.initialize());
app.use(flash());
app.use('/access', accessRouter);
app.use(tokenRefreshMiddleware);
app.use('/home', ensureAuthenticated, homeRouter);
app.use('/ref-data', ensureAuthenticated, refDataRouter);
app.use('/funding', ensureAuthenticated, fundingRouter);
app.use('/bcr', ensureAuthenticated, bcrRouter);
app.use('/items', ensureAuthenticated, itemsRouter);
app.use('/values', ensureAuthenticated, valuesRouter);
app.use('/release-notes', ensureAuthenticated, releaseNotesRouter);
app.use('/restore-points', ensureAuthenticated, restorePointsRouter);
app.use('/api', ensureAuthenticated, apiRouter);
app.use(function(err, req, res, next) {
  // If it's already a typed error, use it directly
  if (err.type) {
    return handleWebError(err, req, res, {
      viewPath: 'error',
      defaultMessage: 'An unexpected error occurred'
    });
app.use('/monitoring', monitoringRouter);// Routes
// Home route
app.get('/', (req, res) => {
  res.render('index', {
    title: 'Register Team Internal Services',
    user: req.user
  });
});

// BCR Submissions route
app.get('/bcr/submissions', async (req, res) => {
  try {
    console.log('BCR Submissions route called');
    
    // Get BCR submissions controller
    const submissionsController = require('../controllers/bcr/submissionsController');
    
    // Call the controller's listSubmissions function
    return await submissionsController.listSubmissions(req, res);
  } catch (error) {
    console.error('Error in BCR submissions route:', error);
    res.status(500).render('error', {
      title: 'Error',
      message: 'An unexpected error occurred while trying to list BCR submissions.',
      error: process.env.NODE_ENV === 'development' ? error : {},
      user: req.user
    });
  }
});

// Direct BCR Submission View route
app.get('/direct/bcr-submissions/:id', async (req, res) => {
  try {
    console.log('Direct BCR submission view route called for ID:', req.params.id);
    
    // Get the BCR directly to check if it exists
    let bcr = null;
    try {
      bcr = await prisma.Bcrs.findUnique({
        where: { id: req.params.id }
      });
    } catch (error) {
      console.log('Error retrieving BCR:', error.message);
    }
    
    if (!bcr) {
      console.log(`BCR with ID ${req.params.id} not found`);
      return res.status(404).render('error', {
        title: 'Not Found',
        message: `BCR with ID ${req.params.id} not found. The BCR may have been deleted or the ID is incorrect.`,
        error: {},
        user: req.user
      });
    }
    
    // Create submission and workflow objects directly from BCR data
    const submission = {
      bcrId: bcr.id,
      bcrCode: bcr.bcrNumber,
      description: bcr.description,
      priority: bcr.priority,
      impact: bcr.impact,
      requestedBy: bcr.requestedBy,
      createdAt: bcr.createdAt,
      updatedAt: bcr.updatedAt
    };
    
    const workflow = {
      bcrId: bcr.id,
      status: bcr.status,
      assignedTo: bcr.assignedTo,
      targetDate: bcr.targetDate,
      implementationDate: bcr.implementationDate,
      notes: bcr.notes,
      createdAt: bcr.createdAt,
      updatedAt: bcr.updatedAt
    };
    
    // Get the user who requested the BCR
    let requester = null;
    try {
      requester = await prisma.Users.findUnique({
        where: { id: bcr.requestedBy }
      });
    } catch (error) {
      console.log('Error retrieving requester:', error.message);
    }
    
    // Get the user who is assigned to the BCR
    let assignee = null;
    if (bcr.assignedTo) {
      try {
        assignee = await prisma.Users.findUnique({
          where: { id: bcr.assignedTo }
        });
      } catch (error) {
        console.log('Error retrieving assignee:', error.message);
      }
    }
    
    // Get urgency levels and impact areas
    let urgencyLevels = [];
    let impactAreas = [];
    try {
      urgencyLevels = await prisma.BcrConfigs.findMany({
        where: { type: 'urgencyLevel' },
        orderBy: { displayOrder: 'asc' }
      });
      
      impactAreas = await prisma.BcrConfigs.findMany({
        where: { type: 'impactArea' },
        orderBy: { displayOrder: 'asc' }
      });
    } catch (error) {
      console.log('Error retrieving BCR configs:', error.message);
    }
    
    // Render the template with all available data
    return res.render('modules/bcr/submission-details', {
      title: `BCR ${bcr.bcrNumber || bcr.id}`,
      bcr,
      submission,
      workflow,
      requester,
      assignee,
      urgencyLevels,
      impactAreas,
      user: req.user
    });
  } catch (error) {
    console.error('Error in direct BCR submission view route:', error);
    res.status(500).render('error', {
      title: 'Error',
      message: 'An unexpected error occurred while trying to view the BCR submission.',
      error: process.env.NODE_ENV === 'development' ? error : {},
      user: req.user
    });
  }
});


app.get('/stylesheets/:file', (req, res, next) => {
  const filePath = path.join(__dirname, 'public', 'stylesheets', req.params.file);
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      return next(); // File doesn't exist, let Express handle it
    }
    res.setHeader('Content-Type', 'text/css');
    res.sendFile(filePath);
  });

app.get('/debug/bcr-submissions', async (req, res) => {
  try {
    console.log('Debug endpoint called - bypassing authentication');
    
    // Create a mock session for the debug endpoint
    req.session = {
      passport: {
        user: {
          id: 'debug-user',
          username: 'debug@example.com',
          displayName: 'Debug User',
          role: 'admin'
        }
      }
    };
    
    // Manually set up the render function to capture the data
    const originalRender = res.render;
    res.render = function(view, options) {
      console.log('Debug render called with view:', view);
      console.log('Debug render data:', JSON.stringify(options, null, 2));
      return originalRender.call(this, view, options);
    };
    
    // Create a custom error handler for this route
    const handleError = (error) => {
      console.error('Debug endpoint error details:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        name: error.name
      });

app.get('/debug/bcr-submissions-simple', async (req, res) => {
  try {
    console.log('Simplified debug endpoint called');
    
    // Create a mock user for the debug endpoint instead of modifying the session
    req.user = {
      id: 'debug-user',
      email: 'debug@example.com',
      name: 'Debug User',
      role: 'admin'
    };
    
    // Use the simplified debug controller
    const debugController = require('./controllers/bcr/debugSubmissionsController');
    await debugController.debugListSubmissions(req, res);
  } catch (error) {
    console.error('Error in simplified debug endpoint:', error);
    res.status(500).send(`
      <h1>Simplified Debug Error</h1>
      <h2>Error Message</h2>
      <pre>${error.message}</pre>
      <h2>Error Stack</h2>
      <pre>${error.stack}</pre>
    `);
  }
});

app.get('/direct/bcr-submissions', async (req, res) => {
  try {
    console.log('Direct BCR submissions access route called');
    
    // Create a mock user with admin privileges
    req.user = {
      id: '00000000-0000-0000-0000-000000000000',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin'
    };
    
    // Call the actual submissions controller
    const submissionsController = require('./controllers/bcr/submissionsController');
    await submissionsController.listSubmissions(req, res);
  } catch (error) {
    console.error('Error in direct BCR submissions access route:', error);
    res.status(500).send(`
      <h1>Direct Access Error</h1>
      <h2>Error Message</h2>
      <pre>${error.message}</pre>
      <h2>Error Stack</h2>
      <pre>${error.stack}</pre>
    `);
  }
});

app.get('/direct/bcr-edit/:id', async (req, res) => {
  try {
    console.log('Direct BCR edit access route called for ID:', req.params.id);
    
    // Create a mock user with admin privileges
    req.user = {
      id: '00000000-0000-0000-0000-000000000000',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin'
    };
    
    // Call the actual form controller
    const formController = require('./controllers/bcr/formController');
    await formController.showEditForm(req, res);
  } catch (error) {
    console.error('Error in direct BCR edit access route:', error);
    res.status(500).send(`
      <h1>Direct Access Error</h1>
      <h2>Error Message</h2>
      <pre>${error.message}</pre>
      <h2>Error Stack</h2>
      <pre>${error.stack}</pre>
    `);
  }
});

app.get('/bcr/submissions/:id/delete-confirmation', async (req, res) => {
  try {
    console.log('BCR delete confirmation route called for ID:', req.params.id);
    
    // Create a mock user with admin privileges
    req.user = {
      id: '00000000-0000-0000-0000-000000000000',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin'
    };
    
    // Get the BCR directly to check if it exists
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    const bcr = await prisma.Bcrs.findUnique({
      where: { id: req.params.id }
    });

app.post('/bcr/submissions/:id/delete', async (req, res) => {
  try {
    console.log('BCR delete route called for ID:', req.params.id);
    
    // Create a mock user with admin privileges
    req.user = {
      id: '00000000-0000-0000-0000-000000000000',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin'
    };
    
    // Get the BCR directly to check if it exists
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    const bcr = await prisma.Bcrs.findUnique({
      where: { id: req.params.id }
    });
// Error handler
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(err.status || 500).render('error', {
    title: 'Error',
    message: err.message,
    error: process.env.NODE_ENV === 'development' ? err : {},
    user: req.user
  });
});

// Start the server
const server = app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

module.exports = server;
