/**
 * Script to create 5 test BCR submissions with different statuses
 */
require('dotenv').config();
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

// Connect to MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/rrdm';
mongoose.connect(MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Import models directly
const { Submission, UrgencyLevel } = require('../models');

// Verify models are loaded
if (!Submission || !UrgencyLevel) {
  console.error('Error: Models not properly loaded');
  process.exit(1);
}

// Import the submission code generator
const { generateSubmissionCode, getSubmitterTypeCode } = require('../utils/submissionCodeGenerator');

// Create a dummy user ID
const dummyUserId = new mongoose.Types.ObjectId();

// Test data for submissions
const submissionData = [
  {
    fullName: 'Test User 1',
    emailAddress: 'test.user1@example.com',
    submissionSource: 'Internal',
    organisation: 'RRDM Team',
    briefDescription: 'Pending submission for testing',
    justification: 'This is a test submission with Pending status',
    urgencyLevel: 'Medium',
    impactAreas: ['API', 'Database'],
    attachments: 'No attachments for test submission',
    declaration: true,
    submittedById: dummyUserId,
    status: 'Pending'
  },
  {
    fullName: 'Test User 2',
    emailAddress: 'test.user2@example.com',
    submissionSource: 'External',
    organisation: 'Partner Company',
    briefDescription: 'Approved submission for testing',
    justification: 'This is a test submission with Approved status',
    urgencyLevel: 'High',
    impactAreas: ['API', 'Reference Data'],
    attachments: 'No attachments for test submission',
    declaration: true,
    status: 'Approved',
    submittedById: dummyUserId,
    reviewedAt: new Date(),
    reviewComments: 'Approved for implementation'
  },
  {
    fullName: 'Test User 3',
    emailAddress: 'test.user3@example.com',
    submissionSource: 'Other',
    organisation: 'External Consultant',
    briefDescription: 'Rejected submission for testing',
    justification: 'This is a test submission with Rejected status',
    urgencyLevel: 'Medium',
    impactAreas: ['Documentation & Guidance'],
    attachments: 'No attachments for test submission',
    declaration: true,
    status: 'Rejected',
    submittedById: dummyUserId,
    reviewedAt: new Date(),
    reviewComments: 'Rejected due to insufficient business justification'
  },
  {
    fullName: 'Test User 4',
    emailAddress: 'test.user4@example.com',
    submissionSource: 'Internal',
    organisation: 'Ashtown Digital',
    briefDescription: 'Paused submission for testing',
    justification: 'This is a test submission with Paused status',
    urgencyLevel: 'Low',
    impactAreas: ['Policy', 'Funding'],
    attachments: 'No attachments for test submission',
    declaration: true,
    status: 'Paused',
    submittedById: dummyUserId,
    reviewedAt: new Date(),
    reviewComments: 'Paused pending further information from stakeholders'
  },
  {
    fullName: 'Test User 5',
    emailAddress: 'test.user5@example.com',
    submissionSource: 'External',
    organisation: 'Government Agency',
    briefDescription: 'More Info Required submission for testing',
    justification: 'This is a test submission with More Info Required status',
    urgencyLevel: 'Planning',
    otherUrgencyDescription: 'Custom urgency level for testing',
    impactAreas: ['CSV', 'Backend'],
    attachments: 'No attachments for test submission',
    declaration: true,
    status: 'More Info Required',
    submittedById: dummyUserId,
    reviewedAt: new Date(),
    reviewComments: 'Please provide more details about the technical requirements'
  }
];

// Function to create test submissions
async function createTestSubmissions() {
  try {
    console.log('Creating test BCR submissions...');
    
    // Delete existing test submissions
    console.log('Deleting existing test submissions...');
    await Submission.deleteMany({
      emailAddress: { $in: submissionData.map(data => data.emailAddress) }
    });
    
    // Create submissions
    const submissions = [];
    for (let i = 0; i < submissionData.length; i++) {
      const data = submissionData[i];
      
      // The submission code will be auto-generated by the pre-save hook
      // based on the submitter source information
      const submission = new Submission(data);
      
      await submission.save();
      submissions.push(submission);
      
      console.log(`Created ${submission.status} submission: ${submission.submissionCode} from ${submission.submissionSource} source`);
    }
    
    console.log('Successfully created 5 test submissions with different statuses');
    
  } catch (error) {
    console.error('Error creating test submissions:', error);
  } finally {
    // Close the MongoDB connection
    mongoose.connection.close();
    console.log('MongoDB connection closed');
  }
}

// Run the function
createTestSubmissions();
